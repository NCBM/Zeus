from collections.abc import Callable
from contextlib import AbstractContextManager
from typing import Any, Self, overload, override

class _PyJClass(type):
    def __getattr__(self, name: str) -> Any: ...

    @override
    def __setattr__(self, name: str, value: Any, /) -> None: ...


class _PyJObject(metaclass=_PyJClass):
    def __init__(self, *args, **kwds) -> None: ...
    
    def __getattr__(self, name: str) -> Any: ...

    @override
    def __setattr__(self, name: str, value: Any, /) -> None: ...

    def equals(self, other: Any) -> bool: ...

    def getClass(self) -> type[Self]: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def synchronized(self, /) -> AbstractContextManager[Any, Any]: ...

    def toString(self) -> str: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, timeout: int) -> None: ...

    @overload
    def wait(self, timeout: int, nanos: int) -> None: ...


def setJavaToPythonConverter[T: _PyJObject](obj: type[T], conversion: Callable[[T], object]) -> None: ...